datasource db {
  provider  = "postgresql"
  url = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String?          @unique
  image         String?
  role         UserRole @default(USER)
  emailVerified DateTime?
  accounts      Account[]
  questions     Question[]
  answers      Answer[]
  views        View[]
  upvotes      Upvote[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}

model Question {
  id         String  @id @default(cuid())
  title       String
  content      String
  anonymous    Boolean @default(false)
  answers     Answer[]
  views      View[]
  viewCount  Int @default(0)
  tags       Tag[]
  user         User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Answer {
  id         String  @id @default(cuid())
  content      String
  questionId   String
  question     Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  user        User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  upvotes    Upvote[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt


}

model View {
  id         String  @id @default(cuid())
  questionId   String
  question     Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  userId     String
  user        User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@unique([questionId, userId])
}
model Upvote {
  id         String  @id @default(cuid())
  answerId    String
  answer      Answer @relation(fields: [answerId], references: [id], onDelete: Cascade)
  userId     String
  user        User  @relation(fields: [userId], references: [id], onDelete: Cascade) 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([answerId, userId])
}

model Tag {
  id         String  @id @default(cuid())
  name       String
  questions  Question[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

